// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  album: (where?: AlbumWhereInput) => Promise<boolean>;
  artist: (where?: ArtistWhereInput) => Promise<boolean>;
  composer: (where?: ComposerWhereInput) => Promise<boolean>;
  producer: (where?: ProducerWhereInput) => Promise<boolean>;
  recording: (where?: RecordingWhereInput) => Promise<boolean>;
  song: (where?: SongWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  album: (where: AlbumWhereUniqueInput) => AlbumNullablePromise;
  albums: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Album>;
  albumsConnection: (args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AlbumConnectionPromise;
  artist: (where: ArtistWhereUniqueInput) => ArtistNullablePromise;
  artists: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Artist>;
  artistsConnection: (args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArtistConnectionPromise;
  composer: (where: ComposerWhereUniqueInput) => ComposerNullablePromise;
  composers: (args?: {
    where?: ComposerWhereInput;
    orderBy?: ComposerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Composer>;
  composersConnection: (args?: {
    where?: ComposerWhereInput;
    orderBy?: ComposerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ComposerConnectionPromise;
  producer: (where: ProducerWhereUniqueInput) => ProducerNullablePromise;
  producers: (args?: {
    where?: ProducerWhereInput;
    orderBy?: ProducerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Producer>;
  producersConnection: (args?: {
    where?: ProducerWhereInput;
    orderBy?: ProducerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProducerConnectionPromise;
  recording: (where: RecordingWhereUniqueInput) => RecordingNullablePromise;
  recordings: (args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Recording>;
  recordingsConnection: (args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RecordingConnectionPromise;
  song: (where: SongWhereUniqueInput) => SongNullablePromise;
  songs: (args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Song>;
  songsConnection: (args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SongConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAlbum: (data: AlbumCreateInput) => AlbumPromise;
  updateAlbum: (args: {
    data: AlbumUpdateInput;
    where: AlbumWhereUniqueInput;
  }) => AlbumPromise;
  updateManyAlbums: (args: {
    data: AlbumUpdateManyMutationInput;
    where?: AlbumWhereInput;
  }) => BatchPayloadPromise;
  upsertAlbum: (args: {
    where: AlbumWhereUniqueInput;
    create: AlbumCreateInput;
    update: AlbumUpdateInput;
  }) => AlbumPromise;
  deleteAlbum: (where: AlbumWhereUniqueInput) => AlbumPromise;
  deleteManyAlbums: (where?: AlbumWhereInput) => BatchPayloadPromise;
  createArtist: (data: ArtistCreateInput) => ArtistPromise;
  updateArtist: (args: {
    data: ArtistUpdateInput;
    where: ArtistWhereUniqueInput;
  }) => ArtistPromise;
  updateManyArtists: (args: {
    data: ArtistUpdateManyMutationInput;
    where?: ArtistWhereInput;
  }) => BatchPayloadPromise;
  upsertArtist: (args: {
    where: ArtistWhereUniqueInput;
    create: ArtistCreateInput;
    update: ArtistUpdateInput;
  }) => ArtistPromise;
  deleteArtist: (where: ArtistWhereUniqueInput) => ArtistPromise;
  deleteManyArtists: (where?: ArtistWhereInput) => BatchPayloadPromise;
  createComposer: (data: ComposerCreateInput) => ComposerPromise;
  updateComposer: (args: {
    data: ComposerUpdateInput;
    where: ComposerWhereUniqueInput;
  }) => ComposerPromise;
  updateManyComposers: (args: {
    data: ComposerUpdateManyMutationInput;
    where?: ComposerWhereInput;
  }) => BatchPayloadPromise;
  upsertComposer: (args: {
    where: ComposerWhereUniqueInput;
    create: ComposerCreateInput;
    update: ComposerUpdateInput;
  }) => ComposerPromise;
  deleteComposer: (where: ComposerWhereUniqueInput) => ComposerPromise;
  deleteManyComposers: (where?: ComposerWhereInput) => BatchPayloadPromise;
  createProducer: (data: ProducerCreateInput) => ProducerPromise;
  updateProducer: (args: {
    data: ProducerUpdateInput;
    where: ProducerWhereUniqueInput;
  }) => ProducerPromise;
  updateManyProducers: (args: {
    data: ProducerUpdateManyMutationInput;
    where?: ProducerWhereInput;
  }) => BatchPayloadPromise;
  upsertProducer: (args: {
    where: ProducerWhereUniqueInput;
    create: ProducerCreateInput;
    update: ProducerUpdateInput;
  }) => ProducerPromise;
  deleteProducer: (where: ProducerWhereUniqueInput) => ProducerPromise;
  deleteManyProducers: (where?: ProducerWhereInput) => BatchPayloadPromise;
  createRecording: (data: RecordingCreateInput) => RecordingPromise;
  updateRecording: (args: {
    data: RecordingUpdateInput;
    where: RecordingWhereUniqueInput;
  }) => RecordingPromise;
  updateManyRecordings: (args: {
    data: RecordingUpdateManyMutationInput;
    where?: RecordingWhereInput;
  }) => BatchPayloadPromise;
  upsertRecording: (args: {
    where: RecordingWhereUniqueInput;
    create: RecordingCreateInput;
    update: RecordingUpdateInput;
  }) => RecordingPromise;
  deleteRecording: (where: RecordingWhereUniqueInput) => RecordingPromise;
  deleteManyRecordings: (where?: RecordingWhereInput) => BatchPayloadPromise;
  createSong: (data: SongCreateInput) => SongPromise;
  updateSong: (args: {
    data: SongUpdateInput;
    where: SongWhereUniqueInput;
  }) => SongPromise;
  updateManySongs: (args: {
    data: SongUpdateManyMutationInput;
    where?: SongWhereInput;
  }) => BatchPayloadPromise;
  upsertSong: (args: {
    where: SongWhereUniqueInput;
    create: SongCreateInput;
    update: SongUpdateInput;
  }) => SongPromise;
  deleteSong: (where: SongWhereUniqueInput) => SongPromise;
  deleteManySongs: (where?: SongWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  album: (
    where?: AlbumSubscriptionWhereInput
  ) => AlbumSubscriptionPayloadSubscription;
  artist: (
    where?: ArtistSubscriptionWhereInput
  ) => ArtistSubscriptionPayloadSubscription;
  composer: (
    where?: ComposerSubscriptionWhereInput
  ) => ComposerSubscriptionPayloadSubscription;
  producer: (
    where?: ProducerSubscriptionWhereInput
  ) => ProducerSubscriptionPayloadSubscription;
  recording: (
    where?: RecordingSubscriptionWhereInput
  ) => RecordingSubscriptionPayloadSubscription;
  song: (
    where?: SongSubscriptionWhereInput
  ) => SongSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SongOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "publisher_ASC"
  | "publisher_DESC"
  | "publishedDate_ASC"
  | "publishedDate_DESC"
  | "altTitle_ASC"
  | "altTitle_DESC"
  | "instrumental_ASC"
  | "instrumental_DESC"
  | "fromFilm_ASC"
  | "fromFilm_DESC"
  | "tribute_ASC"
  | "tribute_DESC";

export type ComposerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type ArtistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type AlbumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "catalogNumber_ASC"
  | "catalogNumber_DESC"
  | "format_ASC"
  | "format_DESC"
  | "info_ASC"
  | "info_DESC"
  | "releaseDate_ASC"
  | "releaseDate_DESC"
  | "recordLabel_ASC"
  | "recordLabel_DESC"
  | "single_ASC"
  | "single_DESC";

export type RecordingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "producer_ASC"
  | "producer_DESC"
  | "location_ASC"
  | "location_DESC"
  | "completed_ASC"
  | "completed_DESC";

export type ProducerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type Permission =
  | "ADMIN"
  | "USER"
  | "SONGUPDATE"
  | "SONGDELETE"
  | "PERMISSIONUPDATE";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface RecordingUpdateWithWhereUniqueWithoutAlbumsInput {
  where: RecordingWhereUniqueInput;
  data: RecordingUpdateWithoutAlbumsDataInput;
}

export type AlbumWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  info?: Maybe<String>;
}>;

export interface SongUpdateWithoutArtistsDataInput {
  title?: Maybe<String>;
  composer?: Maybe<ComposerUpdateManyWithoutSongsInput>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  albums?: Maybe<AlbumUpdateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutSongInput>;
}

export interface RecordingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  producer_not?: Maybe<String>;
  producer_in?: Maybe<String[] | String>;
  producer_not_in?: Maybe<String[] | String>;
  producer_lt?: Maybe<String>;
  producer_lte?: Maybe<String>;
  producer_gt?: Maybe<String>;
  producer_gte?: Maybe<String>;
  producer_contains?: Maybe<String>;
  producer_not_contains?: Maybe<String>;
  producer_starts_with?: Maybe<String>;
  producer_not_starts_with?: Maybe<String>;
  producer_ends_with?: Maybe<String>;
  producer_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  completed_not?: Maybe<DateTimeInput>;
  completed_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  completed_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  completed_lt?: Maybe<DateTimeInput>;
  completed_lte?: Maybe<DateTimeInput>;
  completed_gt?: Maybe<DateTimeInput>;
  completed_gte?: Maybe<DateTimeInput>;
  artist?: Maybe<ArtistWhereInput>;
  song?: Maybe<SongWhereInput>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  AND?: Maybe<RecordingWhereInput[] | RecordingWhereInput>;
  OR?: Maybe<RecordingWhereInput[] | RecordingWhereInput>;
  NOT?: Maybe<RecordingWhereInput[] | RecordingWhereInput>;
}

export interface AlbumUpdateInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single?: Maybe<Boolean>;
  songs?: Maybe<SongUpdateManyWithoutAlbumsInput>;
  artists?: Maybe<ArtistUpdateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutAlbumsInput>;
}

export interface ArtistUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SongUpdateManyWithoutAlbumsInput {
  create?: Maybe<SongCreateWithoutAlbumsInput[] | SongCreateWithoutAlbumsInput>;
  delete?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  set?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  disconnect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  update?: Maybe<
    | SongUpdateWithWhereUniqueWithoutAlbumsInput[]
    | SongUpdateWithWhereUniqueWithoutAlbumsInput
  >;
  upsert?: Maybe<
    | SongUpsertWithWhereUniqueWithoutAlbumsInput[]
    | SongUpsertWithWhereUniqueWithoutAlbumsInput
  >;
  deleteMany?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  updateMany?: Maybe<
    SongUpdateManyWithWhereNestedInput[] | SongUpdateManyWithWhereNestedInput
  >;
}

export interface AlbumUpdateManyWithoutSongsInput {
  create?: Maybe<AlbumCreateWithoutSongsInput[] | AlbumCreateWithoutSongsInput>;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutSongsInput[]
    | AlbumUpdateWithWhereUniqueWithoutSongsInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutSongsInput[]
    | AlbumUpsertWithWhereUniqueWithoutSongsInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export interface SongUpdateWithWhereUniqueWithoutAlbumsInput {
  where: SongWhereUniqueInput;
  data: SongUpdateWithoutAlbumsDataInput;
}

export interface ArtistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  songs_every?: Maybe<SongWhereInput>;
  songs_some?: Maybe<SongWhereInput>;
  songs_none?: Maybe<SongWhereInput>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  recordings_every?: Maybe<RecordingWhereInput>;
  recordings_some?: Maybe<RecordingWhereInput>;
  recordings_none?: Maybe<RecordingWhereInput>;
  AND?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  OR?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
  NOT?: Maybe<ArtistWhereInput[] | ArtistWhereInput>;
}

export interface SongUpdateWithoutAlbumsDataInput {
  title?: Maybe<String>;
  composer?: Maybe<ComposerUpdateManyWithoutSongsInput>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutSongInput>;
}

export interface ComposerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  songs_every?: Maybe<SongWhereInput>;
  songs_some?: Maybe<SongWhereInput>;
  songs_none?: Maybe<SongWhereInput>;
  AND?: Maybe<ComposerWhereInput[] | ComposerWhereInput>;
  OR?: Maybe<ComposerWhereInput[] | ComposerWhereInput>;
  NOT?: Maybe<ComposerWhereInput[] | ComposerWhereInput>;
}

export interface ComposerUpdateManyWithoutSongsInput {
  create?: Maybe<
    ComposerCreateWithoutSongsInput[] | ComposerCreateWithoutSongsInput
  >;
  delete?: Maybe<ComposerWhereUniqueInput[] | ComposerWhereUniqueInput>;
  connect?: Maybe<ComposerWhereUniqueInput[] | ComposerWhereUniqueInput>;
  set?: Maybe<ComposerWhereUniqueInput[] | ComposerWhereUniqueInput>;
  disconnect?: Maybe<ComposerWhereUniqueInput[] | ComposerWhereUniqueInput>;
  update?: Maybe<
    | ComposerUpdateWithWhereUniqueWithoutSongsInput[]
    | ComposerUpdateWithWhereUniqueWithoutSongsInput
  >;
  upsert?: Maybe<
    | ComposerUpsertWithWhereUniqueWithoutSongsInput[]
    | ComposerUpsertWithWhereUniqueWithoutSongsInput
  >;
  deleteMany?: Maybe<ComposerScalarWhereInput[] | ComposerScalarWhereInput>;
  updateMany?: Maybe<
    | ComposerUpdateManyWithWhereNestedInput[]
    | ComposerUpdateManyWithWhereNestedInput
  >;
}

export interface RecordingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RecordingWhereInput>;
  AND?: Maybe<
    RecordingSubscriptionWhereInput[] | RecordingSubscriptionWhereInput
  >;
  OR?: Maybe<
    RecordingSubscriptionWhereInput[] | RecordingSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RecordingSubscriptionWhereInput[] | RecordingSubscriptionWhereInput
  >;
}

export interface ComposerUpdateWithWhereUniqueWithoutSongsInput {
  where: ComposerWhereUniqueInput;
  data: ComposerUpdateWithoutSongsDataInput;
}

export interface ComposerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ComposerWhereInput>;
  AND?: Maybe<
    ComposerSubscriptionWhereInput[] | ComposerSubscriptionWhereInput
  >;
  OR?: Maybe<ComposerSubscriptionWhereInput[] | ComposerSubscriptionWhereInput>;
  NOT?: Maybe<
    ComposerSubscriptionWhereInput[] | ComposerSubscriptionWhereInput
  >;
}

export interface ComposerUpdateWithoutSongsDataInput {
  name?: Maybe<String>;
}

export interface AlbumSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AlbumWhereInput>;
  AND?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  OR?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
  NOT?: Maybe<AlbumSubscriptionWhereInput[] | AlbumSubscriptionWhereInput>;
}

export interface ComposerUpsertWithWhereUniqueWithoutSongsInput {
  where: ComposerWhereUniqueInput;
  update: ComposerUpdateWithoutSongsDataInput;
  create: ComposerCreateWithoutSongsInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface ComposerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ComposerScalarWhereInput[] | ComposerScalarWhereInput>;
  OR?: Maybe<ComposerScalarWhereInput[] | ComposerScalarWhereInput>;
  NOT?: Maybe<ComposerScalarWhereInput[] | ComposerScalarWhereInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserUpdatepermissionsInput>;
}

export interface ComposerUpdateManyWithWhereNestedInput {
  where: ComposerScalarWhereInput;
  data: ComposerUpdateManyDataInput;
}

export interface UserCreatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface ComposerUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface SongUpdateManyMutationInput {
  title?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
}

export interface ArtistUpdateManyWithoutSongsInput {
  create?: Maybe<
    ArtistCreateWithoutSongsInput[] | ArtistCreateWithoutSongsInput
  >;
  delete?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  set?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  disconnect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  update?: Maybe<
    | ArtistUpdateWithWhereUniqueWithoutSongsInput[]
    | ArtistUpdateWithWhereUniqueWithoutSongsInput
  >;
  upsert?: Maybe<
    | ArtistUpsertWithWhereUniqueWithoutSongsInput[]
    | ArtistUpsertWithWhereUniqueWithoutSongsInput
  >;
  deleteMany?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  updateMany?: Maybe<
    | ArtistUpdateManyWithWhereNestedInput[]
    | ArtistUpdateManyWithWhereNestedInput
  >;
}

export interface SongUpdateInput {
  title?: Maybe<String>;
  composer?: Maybe<ComposerUpdateManyWithoutSongsInput>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutSongsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutSongInput>;
}

export interface ArtistUpdateWithWhereUniqueWithoutSongsInput {
  where: ArtistWhereUniqueInput;
  data: ArtistUpdateWithoutSongsDataInput;
}

export interface SongCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  composer?: Maybe<ComposerCreateManyWithoutSongsInput>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistCreateManyWithoutSongsInput>;
  albums?: Maybe<AlbumCreateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutSongInput>;
}

export interface ArtistUpdateWithoutSongsDataInput {
  name?: Maybe<String>;
  albums?: Maybe<AlbumUpdateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutArtistInput>;
}

export interface RecordingUpdateInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  artist?: Maybe<ArtistUpdateOneWithoutRecordingsInput>;
  song?: Maybe<SongUpdateOneRequiredWithoutRecordingsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutRecordingsInput>;
}

export interface AlbumUpdateManyWithoutArtistsInput {
  create?: Maybe<
    AlbumCreateWithoutArtistsInput[] | AlbumCreateWithoutArtistsInput
  >;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutArtistsInput[]
    | AlbumUpdateWithWhereUniqueWithoutArtistsInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutArtistsInput[]
    | AlbumUpsertWithWhereUniqueWithoutArtistsInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export type RecordingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AlbumUpdateWithWhereUniqueWithoutArtistsInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutArtistsDataInput;
}

export interface RecordingUpdateDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  artist?: Maybe<ArtistUpdateOneWithoutRecordingsInput>;
  song?: Maybe<SongUpdateOneRequiredWithoutRecordingsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutRecordingsInput>;
}

export interface AlbumUpdateWithoutArtistsDataInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single?: Maybe<Boolean>;
  songs?: Maybe<SongUpdateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutAlbumsInput>;
}

export type SongWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface RecordingUpdateManyWithoutAlbumsInput {
  create?: Maybe<
    RecordingCreateWithoutAlbumsInput[] | RecordingCreateWithoutAlbumsInput
  >;
  delete?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  set?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  disconnect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  update?: Maybe<
    | RecordingUpdateWithWhereUniqueWithoutAlbumsInput[]
    | RecordingUpdateWithWhereUniqueWithoutAlbumsInput
  >;
  upsert?: Maybe<
    | RecordingUpsertWithWhereUniqueWithoutAlbumsInput[]
    | RecordingUpsertWithWhereUniqueWithoutAlbumsInput
  >;
  deleteMany?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  updateMany?: Maybe<
    | RecordingUpdateManyWithWhereNestedInput[]
    | RecordingUpdateManyWithWhereNestedInput
  >;
}

export interface ProducerUpdateInput {
  name?: Maybe<String>;
  recordings?: Maybe<RecordingUpdateManyInput>;
}

export interface ComposerUpdateInput {
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutComposerInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface RecordingUpdateWithoutAlbumsDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  artist?: Maybe<ArtistUpdateOneWithoutRecordingsInput>;
  song?: Maybe<SongUpdateOneRequiredWithoutRecordingsInput>;
}

export interface ProducerCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  recordings?: Maybe<RecordingCreateManyInput>;
}

export interface ArtistUpdateOneWithoutRecordingsInput {
  create?: Maybe<ArtistCreateWithoutRecordingsInput>;
  update?: Maybe<ArtistUpdateWithoutRecordingsDataInput>;
  upsert?: Maybe<ArtistUpsertWithoutRecordingsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  resetTokenExpiry_not?: Maybe<Float>;
  resetTokenExpiry_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_not_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_lt?: Maybe<Float>;
  resetTokenExpiry_lte?: Maybe<Float>;
  resetTokenExpiry_gt?: Maybe<Float>;
  resetTokenExpiry_gte?: Maybe<Float>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ArtistUpdateWithoutRecordingsDataInput {
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutArtistsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutArtistsInput>;
}

export interface SongUpdateWithoutComposerDataInput {
  title?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutSongsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutSongInput>;
}

export interface SongUpdateManyWithoutArtistsInput {
  create?: Maybe<
    SongCreateWithoutArtistsInput[] | SongCreateWithoutArtistsInput
  >;
  delete?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  set?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  disconnect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  update?: Maybe<
    | SongUpdateWithWhereUniqueWithoutArtistsInput[]
    | SongUpdateWithWhereUniqueWithoutArtistsInput
  >;
  upsert?: Maybe<
    | SongUpsertWithWhereUniqueWithoutArtistsInput[]
    | SongUpsertWithWhereUniqueWithoutArtistsInput
  >;
  deleteMany?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  updateMany?: Maybe<
    SongUpdateManyWithWhereNestedInput[] | SongUpdateManyWithWhereNestedInput
  >;
}

export interface SongUpdateManyWithoutComposerInput {
  create?: Maybe<
    SongCreateWithoutComposerInput[] | SongCreateWithoutComposerInput
  >;
  delete?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  set?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  disconnect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
  update?: Maybe<
    | SongUpdateWithWhereUniqueWithoutComposerInput[]
    | SongUpdateWithWhereUniqueWithoutComposerInput
  >;
  upsert?: Maybe<
    | SongUpsertWithWhereUniqueWithoutComposerInput[]
    | SongUpsertWithWhereUniqueWithoutComposerInput
  >;
  deleteMany?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  updateMany?: Maybe<
    SongUpdateManyWithWhereNestedInput[] | SongUpdateManyWithWhereNestedInput
  >;
}

export interface SongUpdateWithWhereUniqueWithoutArtistsInput {
  where: SongWhereUniqueInput;
  data: SongUpdateWithoutArtistsDataInput;
}

export interface AlbumCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single: Boolean;
  songs?: Maybe<SongCreateManyWithoutAlbumsInput>;
  artists?: Maybe<ArtistCreateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutAlbumsInput>;
}

export interface SongCreateWithoutComposerInput {
  id?: Maybe<ID_Input>;
  title: String;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistCreateManyWithoutSongsInput>;
  albums?: Maybe<AlbumCreateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutSongInput>;
}

export interface SongCreateWithoutAlbumsInput {
  id?: Maybe<ID_Input>;
  title: String;
  composer?: Maybe<ComposerCreateManyWithoutSongsInput>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistCreateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutSongInput>;
}

export interface AlbumWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  catalogNumber_not?: Maybe<String>;
  catalogNumber_in?: Maybe<String[] | String>;
  catalogNumber_not_in?: Maybe<String[] | String>;
  catalogNumber_lt?: Maybe<String>;
  catalogNumber_lte?: Maybe<String>;
  catalogNumber_gt?: Maybe<String>;
  catalogNumber_gte?: Maybe<String>;
  catalogNumber_contains?: Maybe<String>;
  catalogNumber_not_contains?: Maybe<String>;
  catalogNumber_starts_with?: Maybe<String>;
  catalogNumber_not_starts_with?: Maybe<String>;
  catalogNumber_ends_with?: Maybe<String>;
  catalogNumber_not_ends_with?: Maybe<String>;
  format?: Maybe<String>;
  format_not?: Maybe<String>;
  format_in?: Maybe<String[] | String>;
  format_not_in?: Maybe<String[] | String>;
  format_lt?: Maybe<String>;
  format_lte?: Maybe<String>;
  format_gt?: Maybe<String>;
  format_gte?: Maybe<String>;
  format_contains?: Maybe<String>;
  format_not_contains?: Maybe<String>;
  format_starts_with?: Maybe<String>;
  format_not_starts_with?: Maybe<String>;
  format_ends_with?: Maybe<String>;
  format_not_ends_with?: Maybe<String>;
  info?: Maybe<String>;
  info_not?: Maybe<String>;
  info_in?: Maybe<String[] | String>;
  info_not_in?: Maybe<String[] | String>;
  info_lt?: Maybe<String>;
  info_lte?: Maybe<String>;
  info_gt?: Maybe<String>;
  info_gte?: Maybe<String>;
  info_contains?: Maybe<String>;
  info_not_contains?: Maybe<String>;
  info_starts_with?: Maybe<String>;
  info_not_starts_with?: Maybe<String>;
  info_ends_with?: Maybe<String>;
  info_not_ends_with?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  releaseDate_not?: Maybe<DateTimeInput>;
  releaseDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_lt?: Maybe<DateTimeInput>;
  releaseDate_lte?: Maybe<DateTimeInput>;
  releaseDate_gt?: Maybe<DateTimeInput>;
  releaseDate_gte?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  recordLabel_not?: Maybe<String>;
  recordLabel_in?: Maybe<String[] | String>;
  recordLabel_not_in?: Maybe<String[] | String>;
  recordLabel_lt?: Maybe<String>;
  recordLabel_lte?: Maybe<String>;
  recordLabel_gt?: Maybe<String>;
  recordLabel_gte?: Maybe<String>;
  recordLabel_contains?: Maybe<String>;
  recordLabel_not_contains?: Maybe<String>;
  recordLabel_starts_with?: Maybe<String>;
  recordLabel_not_starts_with?: Maybe<String>;
  recordLabel_ends_with?: Maybe<String>;
  recordLabel_not_ends_with?: Maybe<String>;
  single?: Maybe<Boolean>;
  single_not?: Maybe<Boolean>;
  songs_every?: Maybe<SongWhereInput>;
  songs_some?: Maybe<SongWhereInput>;
  songs_none?: Maybe<SongWhereInput>;
  artists_every?: Maybe<ArtistWhereInput>;
  artists_some?: Maybe<ArtistWhereInput>;
  artists_none?: Maybe<ArtistWhereInput>;
  recordings_every?: Maybe<RecordingWhereInput>;
  recordings_some?: Maybe<RecordingWhereInput>;
  recordings_none?: Maybe<RecordingWhereInput>;
  AND?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  OR?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
  NOT?: Maybe<AlbumWhereInput[] | AlbumWhereInput>;
}

export interface ComposerCreateWithoutSongsInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface AlbumUpdateWithWhereUniqueWithoutSongsInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutSongsDataInput;
}

export interface ArtistCreateWithoutSongsInput {
  id?: Maybe<ID_Input>;
  name: String;
  albums?: Maybe<AlbumCreateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutArtistInput>;
}

export interface AlbumUpdateWithoutSongsDataInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single?: Maybe<Boolean>;
  artists?: Maybe<ArtistUpdateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutAlbumsInput>;
}

export interface AlbumCreateWithoutArtistsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single: Boolean;
  songs?: Maybe<SongCreateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutAlbumsInput>;
}

export interface ArtistUpdateManyWithoutAlbumsInput {
  create?: Maybe<
    ArtistCreateWithoutAlbumsInput[] | ArtistCreateWithoutAlbumsInput
  >;
  delete?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  set?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  disconnect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
  update?: Maybe<
    | ArtistUpdateWithWhereUniqueWithoutAlbumsInput[]
    | ArtistUpdateWithWhereUniqueWithoutAlbumsInput
  >;
  upsert?: Maybe<
    | ArtistUpsertWithWhereUniqueWithoutAlbumsInput[]
    | ArtistUpsertWithWhereUniqueWithoutAlbumsInput
  >;
  deleteMany?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  updateMany?: Maybe<
    | ArtistUpdateManyWithWhereNestedInput[]
    | ArtistUpdateManyWithWhereNestedInput
  >;
}

export interface RecordingCreateWithoutAlbumsInput {
  id?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  artist?: Maybe<ArtistCreateOneWithoutRecordingsInput>;
  song: SongCreateOneWithoutRecordingsInput;
}

export interface ArtistUpdateWithWhereUniqueWithoutAlbumsInput {
  where: ArtistWhereUniqueInput;
  data: ArtistUpdateWithoutAlbumsDataInput;
}

export interface ArtistCreateWithoutRecordingsInput {
  id?: Maybe<ID_Input>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutArtistsInput>;
  albums?: Maybe<AlbumCreateManyWithoutArtistsInput>;
}

export interface ArtistUpdateWithoutAlbumsDataInput {
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutArtistInput>;
}

export interface SongCreateWithoutArtistsInput {
  id?: Maybe<ID_Input>;
  title: String;
  composer?: Maybe<ComposerCreateManyWithoutSongsInput>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  albums?: Maybe<AlbumCreateManyWithoutSongsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutSongInput>;
}

export interface RecordingUpdateManyWithoutArtistInput {
  create?: Maybe<
    RecordingCreateWithoutArtistInput[] | RecordingCreateWithoutArtistInput
  >;
  delete?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  set?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  disconnect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  update?: Maybe<
    | RecordingUpdateWithWhereUniqueWithoutArtistInput[]
    | RecordingUpdateWithWhereUniqueWithoutArtistInput
  >;
  upsert?: Maybe<
    | RecordingUpsertWithWhereUniqueWithoutArtistInput[]
    | RecordingUpsertWithWhereUniqueWithoutArtistInput
  >;
  deleteMany?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  updateMany?: Maybe<
    | RecordingUpdateManyWithWhereNestedInput[]
    | RecordingUpdateManyWithWhereNestedInput
  >;
}

export interface AlbumCreateWithoutSongsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single: Boolean;
  artists?: Maybe<ArtistCreateManyWithoutAlbumsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutAlbumsInput>;
}

export interface RecordingUpdateWithWhereUniqueWithoutArtistInput {
  where: RecordingWhereUniqueInput;
  data: RecordingUpdateWithoutArtistDataInput;
}

export interface ArtistCreateWithoutAlbumsInput {
  id?: Maybe<ID_Input>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutArtistInput>;
}

export interface RecordingUpdateWithoutArtistDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  song?: Maybe<SongUpdateOneRequiredWithoutRecordingsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutRecordingsInput>;
}

export interface RecordingCreateWithoutArtistInput {
  id?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  song: SongCreateOneWithoutRecordingsInput;
  albums?: Maybe<AlbumCreateManyWithoutRecordingsInput>;
}

export interface SongUpdateOneRequiredWithoutRecordingsInput {
  create?: Maybe<SongCreateWithoutRecordingsInput>;
  update?: Maybe<SongUpdateWithoutRecordingsDataInput>;
  upsert?: Maybe<SongUpsertWithoutRecordingsInput>;
  connect?: Maybe<SongWhereUniqueInput>;
}

export interface SongCreateWithoutRecordingsInput {
  id?: Maybe<ID_Input>;
  title: String;
  composer?: Maybe<ComposerCreateManyWithoutSongsInput>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistCreateManyWithoutSongsInput>;
  albums?: Maybe<AlbumCreateManyWithoutSongsInput>;
}

export interface SongUpdateWithoutRecordingsDataInput {
  title?: Maybe<String>;
  composer?: Maybe<ComposerUpdateManyWithoutSongsInput>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
  artists?: Maybe<ArtistUpdateManyWithoutSongsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutSongsInput>;
}

export interface AlbumCreateWithoutRecordingsInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single: Boolean;
  songs?: Maybe<SongCreateManyWithoutAlbumsInput>;
  artists?: Maybe<ArtistCreateManyWithoutAlbumsInput>;
}

export interface SongUpsertWithoutRecordingsInput {
  update: SongUpdateWithoutRecordingsDataInput;
  create: SongCreateWithoutRecordingsInput;
}

export interface RecordingCreateWithoutSongInput {
  id?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  artist?: Maybe<ArtistCreateOneWithoutRecordingsInput>;
  albums?: Maybe<AlbumCreateManyWithoutRecordingsInput>;
}

export interface AlbumUpdateManyWithoutRecordingsInput {
  create?: Maybe<
    AlbumCreateWithoutRecordingsInput[] | AlbumCreateWithoutRecordingsInput
  >;
  delete?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  set?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  disconnect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
  update?: Maybe<
    | AlbumUpdateWithWhereUniqueWithoutRecordingsInput[]
    | AlbumUpdateWithWhereUniqueWithoutRecordingsInput
  >;
  upsert?: Maybe<
    | AlbumUpsertWithWhereUniqueWithoutRecordingsInput[]
    | AlbumUpsertWithWhereUniqueWithoutRecordingsInput
  >;
  deleteMany?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  updateMany?: Maybe<
    AlbumUpdateManyWithWhereNestedInput[] | AlbumUpdateManyWithWhereNestedInput
  >;
}

export interface SongSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SongWhereInput>;
  AND?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
  OR?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
  NOT?: Maybe<SongSubscriptionWhereInput[] | SongSubscriptionWhereInput>;
}

export interface AlbumUpdateWithWhereUniqueWithoutRecordingsInput {
  where: AlbumWhereUniqueInput;
  data: AlbumUpdateWithoutRecordingsDataInput;
}

export interface ProducerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProducerWhereInput>;
  AND?: Maybe<
    ProducerSubscriptionWhereInput[] | ProducerSubscriptionWhereInput
  >;
  OR?: Maybe<ProducerSubscriptionWhereInput[] | ProducerSubscriptionWhereInput>;
  NOT?: Maybe<
    ProducerSubscriptionWhereInput[] | ProducerSubscriptionWhereInput
  >;
}

export interface AlbumUpdateWithoutRecordingsDataInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single?: Maybe<Boolean>;
  songs?: Maybe<SongUpdateManyWithoutAlbumsInput>;
  artists?: Maybe<ArtistUpdateManyWithoutAlbumsInput>;
}

export type ArtistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface AlbumUpsertWithWhereUniqueWithoutRecordingsInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutRecordingsDataInput;
  create: AlbumCreateWithoutRecordingsInput;
}

export type ComposerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface AlbumScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  catalogNumber_not?: Maybe<String>;
  catalogNumber_in?: Maybe<String[] | String>;
  catalogNumber_not_in?: Maybe<String[] | String>;
  catalogNumber_lt?: Maybe<String>;
  catalogNumber_lte?: Maybe<String>;
  catalogNumber_gt?: Maybe<String>;
  catalogNumber_gte?: Maybe<String>;
  catalogNumber_contains?: Maybe<String>;
  catalogNumber_not_contains?: Maybe<String>;
  catalogNumber_starts_with?: Maybe<String>;
  catalogNumber_not_starts_with?: Maybe<String>;
  catalogNumber_ends_with?: Maybe<String>;
  catalogNumber_not_ends_with?: Maybe<String>;
  format?: Maybe<String>;
  format_not?: Maybe<String>;
  format_in?: Maybe<String[] | String>;
  format_not_in?: Maybe<String[] | String>;
  format_lt?: Maybe<String>;
  format_lte?: Maybe<String>;
  format_gt?: Maybe<String>;
  format_gte?: Maybe<String>;
  format_contains?: Maybe<String>;
  format_not_contains?: Maybe<String>;
  format_starts_with?: Maybe<String>;
  format_not_starts_with?: Maybe<String>;
  format_ends_with?: Maybe<String>;
  format_not_ends_with?: Maybe<String>;
  info?: Maybe<String>;
  info_not?: Maybe<String>;
  info_in?: Maybe<String[] | String>;
  info_not_in?: Maybe<String[] | String>;
  info_lt?: Maybe<String>;
  info_lte?: Maybe<String>;
  info_gt?: Maybe<String>;
  info_gte?: Maybe<String>;
  info_contains?: Maybe<String>;
  info_not_contains?: Maybe<String>;
  info_starts_with?: Maybe<String>;
  info_not_starts_with?: Maybe<String>;
  info_ends_with?: Maybe<String>;
  info_not_ends_with?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  releaseDate_not?: Maybe<DateTimeInput>;
  releaseDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  releaseDate_lt?: Maybe<DateTimeInput>;
  releaseDate_lte?: Maybe<DateTimeInput>;
  releaseDate_gt?: Maybe<DateTimeInput>;
  releaseDate_gte?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  recordLabel_not?: Maybe<String>;
  recordLabel_in?: Maybe<String[] | String>;
  recordLabel_not_in?: Maybe<String[] | String>;
  recordLabel_lt?: Maybe<String>;
  recordLabel_lte?: Maybe<String>;
  recordLabel_gt?: Maybe<String>;
  recordLabel_gte?: Maybe<String>;
  recordLabel_contains?: Maybe<String>;
  recordLabel_not_contains?: Maybe<String>;
  recordLabel_starts_with?: Maybe<String>;
  recordLabel_not_starts_with?: Maybe<String>;
  recordLabel_ends_with?: Maybe<String>;
  recordLabel_not_ends_with?: Maybe<String>;
  single?: Maybe<Boolean>;
  single_not?: Maybe<Boolean>;
  AND?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  OR?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
  NOT?: Maybe<AlbumScalarWhereInput[] | AlbumScalarWhereInput>;
}

export type ProducerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AlbumUpdateManyWithWhereNestedInput {
  where: AlbumScalarWhereInput;
  data: AlbumUpdateManyDataInput;
}

export interface RecordingUpdateManyMutationInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
}

export interface AlbumUpdateManyDataInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single?: Maybe<Boolean>;
}

export interface RecordingUpsertWithWhereUniqueNestedInput {
  where: RecordingWhereUniqueInput;
  update: RecordingUpdateDataInput;
  create: RecordingCreateInput;
}

export interface RecordingUpsertWithWhereUniqueWithoutArtistInput {
  where: RecordingWhereUniqueInput;
  update: RecordingUpdateWithoutArtistDataInput;
  create: RecordingCreateWithoutArtistInput;
}

export interface RecordingUpdateManyInput {
  create?: Maybe<RecordingCreateInput[] | RecordingCreateInput>;
  update?: Maybe<
    | RecordingUpdateWithWhereUniqueNestedInput[]
    | RecordingUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RecordingUpsertWithWhereUniqueNestedInput[]
    | RecordingUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  set?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  disconnect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  deleteMany?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  updateMany?: Maybe<
    | RecordingUpdateManyWithWhereNestedInput[]
    | RecordingUpdateManyWithWhereNestedInput
  >;
}

export interface RecordingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  producer_not?: Maybe<String>;
  producer_in?: Maybe<String[] | String>;
  producer_not_in?: Maybe<String[] | String>;
  producer_lt?: Maybe<String>;
  producer_lte?: Maybe<String>;
  producer_gt?: Maybe<String>;
  producer_gte?: Maybe<String>;
  producer_contains?: Maybe<String>;
  producer_not_contains?: Maybe<String>;
  producer_starts_with?: Maybe<String>;
  producer_not_starts_with?: Maybe<String>;
  producer_ends_with?: Maybe<String>;
  producer_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  completed_not?: Maybe<DateTimeInput>;
  completed_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  completed_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  completed_lt?: Maybe<DateTimeInput>;
  completed_lte?: Maybe<DateTimeInput>;
  completed_gt?: Maybe<DateTimeInput>;
  completed_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  OR?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  NOT?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
}

export interface RecordingCreateManyInput {
  create?: Maybe<RecordingCreateInput[] | RecordingCreateInput>;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
}

export interface RecordingUpdateManyWithWhereNestedInput {
  where: RecordingScalarWhereInput;
  data: RecordingUpdateManyDataInput;
}

export interface SongUpsertWithWhereUniqueWithoutComposerInput {
  where: SongWhereUniqueInput;
  update: SongUpdateWithoutComposerDataInput;
  create: SongCreateWithoutComposerInput;
}

export interface RecordingUpdateManyDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
}

export interface ComposerCreateManyWithoutSongsInput {
  create?: Maybe<
    ComposerCreateWithoutSongsInput[] | ComposerCreateWithoutSongsInput
  >;
  connect?: Maybe<ComposerWhereUniqueInput[] | ComposerWhereUniqueInput>;
}

export interface ArtistUpsertWithWhereUniqueWithoutAlbumsInput {
  where: ArtistWhereUniqueInput;
  update: ArtistUpdateWithoutAlbumsDataInput;
  create: ArtistCreateWithoutAlbumsInput;
}

export interface AlbumCreateManyWithoutArtistsInput {
  create?: Maybe<
    AlbumCreateWithoutArtistsInput[] | AlbumCreateWithoutArtistsInput
  >;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface ArtistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  OR?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
  NOT?: Maybe<ArtistScalarWhereInput[] | ArtistScalarWhereInput>;
}

export interface ArtistCreateOneWithoutRecordingsInput {
  create?: Maybe<ArtistCreateWithoutRecordingsInput>;
  connect?: Maybe<ArtistWhereUniqueInput>;
}

export interface ArtistUpdateManyWithWhereNestedInput {
  where: ArtistScalarWhereInput;
  data: ArtistUpdateManyDataInput;
}

export interface AlbumCreateManyWithoutSongsInput {
  create?: Maybe<AlbumCreateWithoutSongsInput[] | AlbumCreateWithoutSongsInput>;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface ArtistUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface RecordingCreateManyWithoutArtistInput {
  create?: Maybe<
    RecordingCreateWithoutArtistInput[] | RecordingCreateWithoutArtistInput
  >;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
}

export interface AlbumUpsertWithWhereUniqueWithoutSongsInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutSongsDataInput;
  create: AlbumCreateWithoutSongsInput;
}

export interface AlbumCreateManyWithoutRecordingsInput {
  create?: Maybe<
    AlbumCreateWithoutRecordingsInput[] | AlbumCreateWithoutRecordingsInput
  >;
  connect?: Maybe<AlbumWhereUniqueInput[] | AlbumWhereUniqueInput>;
}

export interface RecordingUpdateManyWithoutSongInput {
  create?: Maybe<
    RecordingCreateWithoutSongInput[] | RecordingCreateWithoutSongInput
  >;
  delete?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  set?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  disconnect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
  update?: Maybe<
    | RecordingUpdateWithWhereUniqueWithoutSongInput[]
    | RecordingUpdateWithWhereUniqueWithoutSongInput
  >;
  upsert?: Maybe<
    | RecordingUpsertWithWhereUniqueWithoutSongInput[]
    | RecordingUpsertWithWhereUniqueWithoutSongInput
  >;
  deleteMany?: Maybe<RecordingScalarWhereInput[] | RecordingScalarWhereInput>;
  updateMany?: Maybe<
    | RecordingUpdateManyWithWhereNestedInput[]
    | RecordingUpdateManyWithWhereNestedInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface RecordingUpdateWithWhereUniqueWithoutSongInput {
  where: RecordingWhereUniqueInput;
  data: RecordingUpdateWithoutSongDataInput;
}

export interface ArtistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArtistWhereInput>;
  AND?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  OR?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
  NOT?: Maybe<ArtistSubscriptionWhereInput[] | ArtistSubscriptionWhereInput>;
}

export interface RecordingUpdateWithoutSongDataInput {
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  artist?: Maybe<ArtistUpdateOneWithoutRecordingsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutRecordingsInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  permissions?: Maybe<UserCreatepermissionsInput>;
}

export interface RecordingUpsertWithWhereUniqueWithoutSongInput {
  where: RecordingWhereUniqueInput;
  update: RecordingUpdateWithoutSongDataInput;
  create: RecordingCreateWithoutSongInput;
}

export interface ProducerUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SongUpsertWithWhereUniqueWithoutArtistsInput {
  where: SongWhereUniqueInput;
  update: SongUpdateWithoutArtistsDataInput;
  create: SongCreateWithoutArtistsInput;
}

export interface RecordingCreateInput {
  id?: Maybe<ID_Input>;
  producer?: Maybe<String>;
  location?: Maybe<String>;
  completed?: Maybe<DateTimeInput>;
  artist?: Maybe<ArtistCreateOneWithoutRecordingsInput>;
  song: SongCreateOneWithoutRecordingsInput;
  albums?: Maybe<AlbumCreateManyWithoutRecordingsInput>;
}

export interface SongScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  publisher?: Maybe<String>;
  publisher_not?: Maybe<String>;
  publisher_in?: Maybe<String[] | String>;
  publisher_not_in?: Maybe<String[] | String>;
  publisher_lt?: Maybe<String>;
  publisher_lte?: Maybe<String>;
  publisher_gt?: Maybe<String>;
  publisher_gte?: Maybe<String>;
  publisher_contains?: Maybe<String>;
  publisher_not_contains?: Maybe<String>;
  publisher_starts_with?: Maybe<String>;
  publisher_not_starts_with?: Maybe<String>;
  publisher_ends_with?: Maybe<String>;
  publisher_not_ends_with?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  publishedDate_not?: Maybe<DateTimeInput>;
  publishedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedDate_lt?: Maybe<DateTimeInput>;
  publishedDate_lte?: Maybe<DateTimeInput>;
  publishedDate_gt?: Maybe<DateTimeInput>;
  publishedDate_gte?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  altTitle_not?: Maybe<String>;
  altTitle_in?: Maybe<String[] | String>;
  altTitle_not_in?: Maybe<String[] | String>;
  altTitle_lt?: Maybe<String>;
  altTitle_lte?: Maybe<String>;
  altTitle_gt?: Maybe<String>;
  altTitle_gte?: Maybe<String>;
  altTitle_contains?: Maybe<String>;
  altTitle_not_contains?: Maybe<String>;
  altTitle_starts_with?: Maybe<String>;
  altTitle_not_starts_with?: Maybe<String>;
  altTitle_ends_with?: Maybe<String>;
  altTitle_not_ends_with?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  instrumental_not?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  fromFilm_not?: Maybe<String>;
  fromFilm_in?: Maybe<String[] | String>;
  fromFilm_not_in?: Maybe<String[] | String>;
  fromFilm_lt?: Maybe<String>;
  fromFilm_lte?: Maybe<String>;
  fromFilm_gt?: Maybe<String>;
  fromFilm_gte?: Maybe<String>;
  fromFilm_contains?: Maybe<String>;
  fromFilm_not_contains?: Maybe<String>;
  fromFilm_starts_with?: Maybe<String>;
  fromFilm_not_starts_with?: Maybe<String>;
  fromFilm_ends_with?: Maybe<String>;
  fromFilm_not_ends_with?: Maybe<String>;
  tribute?: Maybe<String>;
  tribute_not?: Maybe<String>;
  tribute_in?: Maybe<String[] | String>;
  tribute_not_in?: Maybe<String[] | String>;
  tribute_lt?: Maybe<String>;
  tribute_lte?: Maybe<String>;
  tribute_gt?: Maybe<String>;
  tribute_gte?: Maybe<String>;
  tribute_contains?: Maybe<String>;
  tribute_not_contains?: Maybe<String>;
  tribute_starts_with?: Maybe<String>;
  tribute_not_starts_with?: Maybe<String>;
  tribute_ends_with?: Maybe<String>;
  tribute_not_ends_with?: Maybe<String>;
  AND?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  OR?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
  NOT?: Maybe<SongScalarWhereInput[] | SongScalarWhereInput>;
}

export interface SongUpdateWithWhereUniqueWithoutComposerInput {
  where: SongWhereUniqueInput;
  data: SongUpdateWithoutComposerDataInput;
}

export interface SongUpdateManyWithWhereNestedInput {
  where: SongScalarWhereInput;
  data: SongUpdateManyDataInput;
}

export interface ArtistCreateManyWithoutSongsInput {
  create?: Maybe<
    ArtistCreateWithoutSongsInput[] | ArtistCreateWithoutSongsInput
  >;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
}

export interface SongUpdateManyDataInput {
  title?: Maybe<String>;
  publisher?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  tribute?: Maybe<String>;
}

export interface SongCreateManyWithoutArtistsInput {
  create?: Maybe<
    SongCreateWithoutArtistsInput[] | SongCreateWithoutArtistsInput
  >;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
}

export interface ArtistUpsertWithoutRecordingsInput {
  update: ArtistUpdateWithoutRecordingsDataInput;
  create: ArtistCreateWithoutRecordingsInput;
}

export interface SongCreateOneWithoutRecordingsInput {
  create?: Maybe<SongCreateWithoutRecordingsInput>;
  connect?: Maybe<SongWhereUniqueInput>;
}

export interface RecordingUpsertWithWhereUniqueWithoutAlbumsInput {
  where: RecordingWhereUniqueInput;
  update: RecordingUpdateWithoutAlbumsDataInput;
  create: RecordingCreateWithoutAlbumsInput;
}

export interface SongWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  composer_every?: Maybe<ComposerWhereInput>;
  composer_some?: Maybe<ComposerWhereInput>;
  composer_none?: Maybe<ComposerWhereInput>;
  publisher?: Maybe<String>;
  publisher_not?: Maybe<String>;
  publisher_in?: Maybe<String[] | String>;
  publisher_not_in?: Maybe<String[] | String>;
  publisher_lt?: Maybe<String>;
  publisher_lte?: Maybe<String>;
  publisher_gt?: Maybe<String>;
  publisher_gte?: Maybe<String>;
  publisher_contains?: Maybe<String>;
  publisher_not_contains?: Maybe<String>;
  publisher_starts_with?: Maybe<String>;
  publisher_not_starts_with?: Maybe<String>;
  publisher_ends_with?: Maybe<String>;
  publisher_not_ends_with?: Maybe<String>;
  publishedDate?: Maybe<DateTimeInput>;
  publishedDate_not?: Maybe<DateTimeInput>;
  publishedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedDate_lt?: Maybe<DateTimeInput>;
  publishedDate_lte?: Maybe<DateTimeInput>;
  publishedDate_gt?: Maybe<DateTimeInput>;
  publishedDate_gte?: Maybe<DateTimeInput>;
  altTitle?: Maybe<String>;
  altTitle_not?: Maybe<String>;
  altTitle_in?: Maybe<String[] | String>;
  altTitle_not_in?: Maybe<String[] | String>;
  altTitle_lt?: Maybe<String>;
  altTitle_lte?: Maybe<String>;
  altTitle_gt?: Maybe<String>;
  altTitle_gte?: Maybe<String>;
  altTitle_contains?: Maybe<String>;
  altTitle_not_contains?: Maybe<String>;
  altTitle_starts_with?: Maybe<String>;
  altTitle_not_starts_with?: Maybe<String>;
  altTitle_ends_with?: Maybe<String>;
  altTitle_not_ends_with?: Maybe<String>;
  instrumental?: Maybe<Boolean>;
  instrumental_not?: Maybe<Boolean>;
  fromFilm?: Maybe<String>;
  fromFilm_not?: Maybe<String>;
  fromFilm_in?: Maybe<String[] | String>;
  fromFilm_not_in?: Maybe<String[] | String>;
  fromFilm_lt?: Maybe<String>;
  fromFilm_lte?: Maybe<String>;
  fromFilm_gt?: Maybe<String>;
  fromFilm_gte?: Maybe<String>;
  fromFilm_contains?: Maybe<String>;
  fromFilm_not_contains?: Maybe<String>;
  fromFilm_starts_with?: Maybe<String>;
  fromFilm_not_starts_with?: Maybe<String>;
  fromFilm_ends_with?: Maybe<String>;
  fromFilm_not_ends_with?: Maybe<String>;
  tribute?: Maybe<String>;
  tribute_not?: Maybe<String>;
  tribute_in?: Maybe<String[] | String>;
  tribute_not_in?: Maybe<String[] | String>;
  tribute_lt?: Maybe<String>;
  tribute_lte?: Maybe<String>;
  tribute_gt?: Maybe<String>;
  tribute_gte?: Maybe<String>;
  tribute_contains?: Maybe<String>;
  tribute_not_contains?: Maybe<String>;
  tribute_starts_with?: Maybe<String>;
  tribute_not_starts_with?: Maybe<String>;
  tribute_ends_with?: Maybe<String>;
  tribute_not_ends_with?: Maybe<String>;
  artists_every?: Maybe<ArtistWhereInput>;
  artists_some?: Maybe<ArtistWhereInput>;
  artists_none?: Maybe<ArtistWhereInput>;
  albums_every?: Maybe<AlbumWhereInput>;
  albums_some?: Maybe<AlbumWhereInput>;
  albums_none?: Maybe<AlbumWhereInput>;
  recordings_every?: Maybe<RecordingWhereInput>;
  recordings_some?: Maybe<RecordingWhereInput>;
  recordings_none?: Maybe<RecordingWhereInput>;
  AND?: Maybe<SongWhereInput[] | SongWhereInput>;
  OR?: Maybe<SongWhereInput[] | SongWhereInput>;
  NOT?: Maybe<SongWhereInput[] | SongWhereInput>;
}

export interface AlbumUpsertWithWhereUniqueWithoutArtistsInput {
  where: AlbumWhereUniqueInput;
  update: AlbumUpdateWithoutArtistsDataInput;
  create: AlbumCreateWithoutArtistsInput;
}

export interface ProducerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  recordings_every?: Maybe<RecordingWhereInput>;
  recordings_some?: Maybe<RecordingWhereInput>;
  recordings_none?: Maybe<RecordingWhereInput>;
  AND?: Maybe<ProducerWhereInput[] | ProducerWhereInput>;
  OR?: Maybe<ProducerWhereInput[] | ProducerWhereInput>;
  NOT?: Maybe<ProducerWhereInput[] | ProducerWhereInput>;
}

export interface ArtistUpsertWithWhereUniqueWithoutSongsInput {
  where: ArtistWhereUniqueInput;
  update: ArtistUpdateWithoutSongsDataInput;
  create: ArtistCreateWithoutSongsInput;
}

export interface ComposerUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SongUpsertWithWhereUniqueWithoutAlbumsInput {
  where: SongWhereUniqueInput;
  update: SongUpdateWithoutAlbumsDataInput;
  create: SongCreateWithoutAlbumsInput;
}

export interface RecordingCreateManyWithoutAlbumsInput {
  create?: Maybe<
    RecordingCreateWithoutAlbumsInput[] | RecordingCreateWithoutAlbumsInput
  >;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
}

export interface AlbumUpdateManyMutationInput {
  title?: Maybe<String>;
  catalogNumber?: Maybe<String>;
  format?: Maybe<String>;
  info?: Maybe<String>;
  releaseDate?: Maybe<DateTimeInput>;
  recordLabel?: Maybe<String>;
  single?: Maybe<Boolean>;
}

export interface RecordingCreateManyWithoutSongInput {
  create?: Maybe<
    RecordingCreateWithoutSongInput[] | RecordingCreateWithoutSongInput
  >;
  connect?: Maybe<RecordingWhereUniqueInput[] | RecordingWhereUniqueInput>;
}

export interface ArtistUpdateInput {
  name?: Maybe<String>;
  songs?: Maybe<SongUpdateManyWithoutArtistsInput>;
  albums?: Maybe<AlbumUpdateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingUpdateManyWithoutArtistInput>;
}

export interface ArtistCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  songs?: Maybe<SongCreateManyWithoutArtistsInput>;
  albums?: Maybe<AlbumCreateManyWithoutArtistsInput>;
  recordings?: Maybe<RecordingCreateManyWithoutArtistInput>;
}

export interface ComposerCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  songs?: Maybe<SongCreateManyWithoutComposerInput>;
}

export interface SongCreateManyWithoutComposerInput {
  create?: Maybe<
    SongCreateWithoutComposerInput[] | SongCreateWithoutComposerInput
  >;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
}

export interface UserUpdatepermissionsInput {
  set?: Maybe<Permission[] | Permission>;
}

export interface ArtistCreateManyWithoutAlbumsInput {
  create?: Maybe<
    ArtistCreateWithoutAlbumsInput[] | ArtistCreateWithoutAlbumsInput
  >;
  connect?: Maybe<ArtistWhereUniqueInput[] | ArtistWhereUniqueInput>;
}

export interface SongCreateManyWithoutAlbumsInput {
  create?: Maybe<SongCreateWithoutAlbumsInput[] | SongCreateWithoutAlbumsInput>;
  connect?: Maybe<SongWhereUniqueInput[] | SongWhereUniqueInput>;
}

export interface RecordingUpdateWithWhereUniqueNestedInput {
  where: RecordingWhereUniqueInput;
  data: RecordingUpdateDataInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface AggregateArtist {
  count: Int;
}

export interface AggregateArtistPromise
  extends Promise<AggregateArtist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArtistSubscription
  extends Promise<AsyncIterator<AggregateArtist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Song {
  id: ID_Output;
  title: String;
  publisher?: String;
  publishedDate?: DateTimeOutput;
  altTitle?: String;
  instrumental?: Boolean;
  fromFilm?: String;
  tribute?: String;
}

export interface SongPromise extends Promise<Song>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  composer: <T = FragmentableArray<Composer>>(args?: {
    where?: ComposerWhereInput;
    orderBy?: ComposerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  publisher: () => Promise<String>;
  publishedDate: () => Promise<DateTimeOutput>;
  altTitle: () => Promise<String>;
  instrumental: () => Promise<Boolean>;
  fromFilm: () => Promise<String>;
  tribute: () => Promise<String>;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SongSubscription
  extends Promise<AsyncIterator<Song>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  composer: <T = Promise<AsyncIterator<ComposerSubscription>>>(args?: {
    where?: ComposerWhereInput;
    orderBy?: ComposerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  publisher: () => Promise<AsyncIterator<String>>;
  publishedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  altTitle: () => Promise<AsyncIterator<String>>;
  instrumental: () => Promise<AsyncIterator<Boolean>>;
  fromFilm: () => Promise<AsyncIterator<String>>;
  tribute: () => Promise<AsyncIterator<String>>;
  artists: <T = Promise<AsyncIterator<ArtistSubscription>>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = Promise<AsyncIterator<RecordingSubscription>>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SongNullablePromise
  extends Promise<Song | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  composer: <T = FragmentableArray<Composer>>(args?: {
    where?: ComposerWhereInput;
    orderBy?: ComposerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  publisher: () => Promise<String>;
  publishedDate: () => Promise<DateTimeOutput>;
  altTitle: () => Promise<String>;
  instrumental: () => Promise<Boolean>;
  fromFilm: () => Promise<String>;
  tribute: () => Promise<String>;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ComposerEdge {
  node: Composer;
  cursor: String;
}

export interface ComposerEdgePromise
  extends Promise<ComposerEdge>,
    Fragmentable {
  node: <T = ComposerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ComposerEdgeSubscription
  extends Promise<AsyncIterator<ComposerEdge>>,
    Fragmentable {
  node: <T = ComposerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RecordingPreviousValues {
  id: ID_Output;
  producer?: String;
  location?: String;
  completed?: DateTimeOutput;
}

export interface RecordingPreviousValuesPromise
  extends Promise<RecordingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  producer: () => Promise<String>;
  location: () => Promise<String>;
  completed: () => Promise<DateTimeOutput>;
}

export interface RecordingPreviousValuesSubscription
  extends Promise<AsyncIterator<RecordingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  producer: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ComposerConnection {
  pageInfo: PageInfo;
  edges: ComposerEdge[];
}

export interface ComposerConnectionPromise
  extends Promise<ComposerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ComposerEdge>>() => T;
  aggregate: <T = AggregateComposerPromise>() => T;
}

export interface ComposerConnectionSubscription
  extends Promise<AsyncIterator<ComposerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ComposerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateComposerSubscription>() => T;
}

export interface ArtistEdge {
  node: Artist;
  cursor: String;
}

export interface ArtistEdgePromise extends Promise<ArtistEdge>, Fragmentable {
  node: <T = ArtistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArtistEdgeSubscription
  extends Promise<AsyncIterator<ArtistEdge>>,
    Fragmentable {
  node: <T = ArtistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SongSubscriptionPayload {
  mutation: MutationType;
  node: Song;
  updatedFields: String[];
  previousValues: SongPreviousValues;
}

export interface SongSubscriptionPayloadPromise
  extends Promise<SongSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SongPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SongPreviousValuesPromise>() => T;
}

export interface SongSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SongSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SongSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SongPreviousValuesSubscription>() => T;
}

export interface Album {
  id: ID_Output;
  title?: String;
  catalogNumber?: String;
  format?: String;
  info?: String;
  releaseDate?: DateTimeOutput;
  recordLabel?: String;
  single: Boolean;
}

export interface AlbumPromise extends Promise<Album>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  catalogNumber: () => Promise<String>;
  format: () => Promise<String>;
  info: () => Promise<String>;
  releaseDate: () => Promise<DateTimeOutput>;
  recordLabel: () => Promise<String>;
  single: () => Promise<Boolean>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AlbumSubscription
  extends Promise<AsyncIterator<Album>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  catalogNumber: () => Promise<AsyncIterator<String>>;
  format: () => Promise<AsyncIterator<String>>;
  info: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  recordLabel: () => Promise<AsyncIterator<String>>;
  single: () => Promise<AsyncIterator<Boolean>>;
  songs: <T = Promise<AsyncIterator<SongSubscription>>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = Promise<AsyncIterator<ArtistSubscription>>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = Promise<AsyncIterator<RecordingSubscription>>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AlbumNullablePromise
  extends Promise<Album | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  catalogNumber: () => Promise<String>;
  format: () => Promise<String>;
  info: () => Promise<String>;
  releaseDate: () => Promise<DateTimeOutput>;
  recordLabel: () => Promise<String>;
  single: () => Promise<Boolean>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  artists: <T = FragmentableArray<Artist>>(args?: {
    where?: ArtistWhereInput;
    orderBy?: ArtistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistConnection {
  pageInfo: PageInfo;
  edges: ArtistEdge[];
}

export interface ArtistConnectionPromise
  extends Promise<ArtistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArtistEdge>>() => T;
  aggregate: <T = AggregateArtistPromise>() => T;
}

export interface ArtistConnectionSubscription
  extends Promise<AsyncIterator<ArtistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArtistEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArtistSubscription>() => T;
}

export interface Composer {
  id: ID_Output;
  name?: String;
}

export interface ComposerPromise extends Promise<Composer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ComposerSubscription
  extends Promise<AsyncIterator<Composer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  songs: <T = Promise<AsyncIterator<SongSubscription>>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ComposerNullablePromise
  extends Promise<Composer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateAlbum {
  count: Int;
}

export interface AggregateAlbumPromise
  extends Promise<AggregateAlbum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAlbumSubscription
  extends Promise<AsyncIterator<AggregateAlbum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSong {
  count: Int;
}

export interface AggregateSongPromise
  extends Promise<AggregateSong>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSongSubscription
  extends Promise<AsyncIterator<AggregateSong>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Artist {
  id: ID_Output;
  name: String;
}

export interface ArtistPromise extends Promise<Artist>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistSubscription
  extends Promise<AsyncIterator<Artist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  songs: <T = Promise<AsyncIterator<SongSubscription>>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = Promise<AsyncIterator<RecordingSubscription>>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistNullablePromise
  extends Promise<Artist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  songs: <T = FragmentableArray<Song>>(args?: {
    where?: SongWhereInput;
    orderBy?: SongOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SongConnection {
  pageInfo: PageInfo;
  edges: SongEdge[];
}

export interface SongConnectionPromise
  extends Promise<SongConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SongEdge>>() => T;
  aggregate: <T = AggregateSongPromise>() => T;
}

export interface SongConnectionSubscription
  extends Promise<AsyncIterator<SongConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SongEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSongSubscription>() => T;
}

export interface AlbumSubscriptionPayload {
  mutation: MutationType;
  node: Album;
  updatedFields: String[];
  previousValues: AlbumPreviousValues;
}

export interface AlbumSubscriptionPayloadPromise
  extends Promise<AlbumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AlbumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AlbumPreviousValuesPromise>() => T;
}

export interface AlbumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AlbumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AlbumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AlbumPreviousValuesSubscription>() => T;
}

export interface RecordingEdge {
  node: Recording;
  cursor: String;
}

export interface RecordingEdgePromise
  extends Promise<RecordingEdge>,
    Fragmentable {
  node: <T = RecordingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RecordingEdgeSubscription
  extends Promise<AsyncIterator<RecordingEdge>>,
    Fragmentable {
  node: <T = RecordingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AlbumPreviousValues {
  id: ID_Output;
  title?: String;
  catalogNumber?: String;
  format?: String;
  info?: String;
  releaseDate?: DateTimeOutput;
  recordLabel?: String;
  single: Boolean;
}

export interface AlbumPreviousValuesPromise
  extends Promise<AlbumPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  catalogNumber: () => Promise<String>;
  format: () => Promise<String>;
  info: () => Promise<String>;
  releaseDate: () => Promise<DateTimeOutput>;
  recordLabel: () => Promise<String>;
  single: () => Promise<Boolean>;
}

export interface AlbumPreviousValuesSubscription
  extends Promise<AsyncIterator<AlbumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  catalogNumber: () => Promise<AsyncIterator<String>>;
  format: () => Promise<AsyncIterator<String>>;
  info: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  recordLabel: () => Promise<AsyncIterator<String>>;
  single: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateProducer {
  count: Int;
}

export interface AggregateProducerPromise
  extends Promise<AggregateProducer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProducerSubscription
  extends Promise<AsyncIterator<AggregateProducer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AlbumEdge {
  node: Album;
  cursor: String;
}

export interface AlbumEdgePromise extends Promise<AlbumEdge>, Fragmentable {
  node: <T = AlbumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AlbumEdgeSubscription
  extends Promise<AsyncIterator<AlbumEdge>>,
    Fragmentable {
  node: <T = AlbumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProducerConnection {
  pageInfo: PageInfo;
  edges: ProducerEdge[];
}

export interface ProducerConnectionPromise
  extends Promise<ProducerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProducerEdge>>() => T;
  aggregate: <T = AggregateProducerPromise>() => T;
}

export interface ProducerConnectionSubscription
  extends Promise<AsyncIterator<ProducerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProducerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProducerSubscription>() => T;
}

export interface ArtistSubscriptionPayload {
  mutation: MutationType;
  node: Artist;
  updatedFields: String[];
  previousValues: ArtistPreviousValues;
}

export interface ArtistSubscriptionPayloadPromise
  extends Promise<ArtistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArtistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArtistPreviousValuesPromise>() => T;
}

export interface ArtistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArtistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArtistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArtistPreviousValuesSubscription>() => T;
}

export interface Producer {
  id: ID_Output;
  name?: String;
}

export interface ProducerPromise extends Promise<Producer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProducerSubscription
  extends Promise<AsyncIterator<Producer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  recordings: <T = Promise<AsyncIterator<RecordingSubscription>>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProducerNullablePromise
  extends Promise<Producer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  recordings: <T = FragmentableArray<Recording>>(args?: {
    where?: RecordingWhereInput;
    orderBy?: RecordingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArtistPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ArtistPreviousValuesPromise
  extends Promise<ArtistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ArtistPreviousValuesSubscription
  extends Promise<AsyncIterator<ArtistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ComposerSubscriptionPayload {
  mutation: MutationType;
  node: Composer;
  updatedFields: String[];
  previousValues: ComposerPreviousValues;
}

export interface ComposerSubscriptionPayloadPromise
  extends Promise<ComposerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ComposerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ComposerPreviousValuesPromise>() => T;
}

export interface ComposerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ComposerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ComposerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ComposerPreviousValuesSubscription>() => T;
}

export interface SongEdge {
  node: Song;
  cursor: String;
}

export interface SongEdgePromise extends Promise<SongEdge>, Fragmentable {
  node: <T = SongPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SongEdgeSubscription
  extends Promise<AsyncIterator<SongEdge>>,
    Fragmentable {
  node: <T = SongSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ComposerPreviousValues {
  id: ID_Output;
  name?: String;
}

export interface ComposerPreviousValuesPromise
  extends Promise<ComposerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ComposerPreviousValuesSubscription
  extends Promise<AsyncIterator<ComposerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface RecordingConnection {
  pageInfo: PageInfo;
  edges: RecordingEdge[];
}

export interface RecordingConnectionPromise
  extends Promise<RecordingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RecordingEdge>>() => T;
  aggregate: <T = AggregateRecordingPromise>() => T;
}

export interface RecordingConnectionSubscription
  extends Promise<AsyncIterator<RecordingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RecordingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRecordingSubscription>() => T;
}

export interface AlbumConnection {
  pageInfo: PageInfo;
  edges: AlbumEdge[];
}

export interface AlbumConnectionPromise
  extends Promise<AlbumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AlbumEdge>>() => T;
  aggregate: <T = AggregateAlbumPromise>() => T;
}

export interface AlbumConnectionSubscription
  extends Promise<AsyncIterator<AlbumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AlbumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAlbumSubscription>() => T;
}

export interface SongPreviousValues {
  id: ID_Output;
  title: String;
  publisher?: String;
  publishedDate?: DateTimeOutput;
  altTitle?: String;
  instrumental?: Boolean;
  fromFilm?: String;
  tribute?: String;
}

export interface SongPreviousValuesPromise
  extends Promise<SongPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  publisher: () => Promise<String>;
  publishedDate: () => Promise<DateTimeOutput>;
  altTitle: () => Promise<String>;
  instrumental: () => Promise<Boolean>;
  fromFilm: () => Promise<String>;
  tribute: () => Promise<String>;
}

export interface SongPreviousValuesSubscription
  extends Promise<AsyncIterator<SongPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  publisher: () => Promise<AsyncIterator<String>>;
  publishedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  altTitle: () => Promise<AsyncIterator<String>>;
  instrumental: () => Promise<AsyncIterator<Boolean>>;
  fromFilm: () => Promise<AsyncIterator<String>>;
  tribute: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface RecordingSubscriptionPayload {
  mutation: MutationType;
  node: Recording;
  updatedFields: String[];
  previousValues: RecordingPreviousValues;
}

export interface RecordingSubscriptionPayloadPromise
  extends Promise<RecordingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RecordingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RecordingPreviousValuesPromise>() => T;
}

export interface RecordingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RecordingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RecordingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RecordingPreviousValuesSubscription>() => T;
}

export interface Recording {
  id: ID_Output;
  producer?: String;
  location?: String;
  completed?: DateTimeOutput;
}

export interface RecordingPromise extends Promise<Recording>, Fragmentable {
  id: () => Promise<ID_Output>;
  producer: () => Promise<String>;
  location: () => Promise<String>;
  completed: () => Promise<DateTimeOutput>;
  artist: <T = ArtistPromise>() => T;
  song: <T = SongPromise>() => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RecordingSubscription
  extends Promise<AsyncIterator<Recording>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  producer: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<DateTimeOutput>>;
  artist: <T = ArtistSubscription>() => T;
  song: <T = SongSubscription>() => T;
  albums: <T = Promise<AsyncIterator<AlbumSubscription>>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RecordingNullablePromise
  extends Promise<Recording | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  producer: () => Promise<String>;
  location: () => Promise<String>;
  completed: () => Promise<DateTimeOutput>;
  artist: <T = ArtistPromise>() => T;
  song: <T = SongPromise>() => T;
  albums: <T = FragmentableArray<Album>>(args?: {
    where?: AlbumWhereInput;
    orderBy?: AlbumOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProducerPreviousValues {
  id: ID_Output;
  name?: String;
}

export interface ProducerPreviousValuesPromise
  extends Promise<ProducerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ProducerPreviousValuesSubscription
  extends Promise<AsyncIterator<ProducerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProducerSubscriptionPayload {
  mutation: MutationType;
  node: Producer;
  updatedFields: String[];
  previousValues: ProducerPreviousValues;
}

export interface ProducerSubscriptionPayloadPromise
  extends Promise<ProducerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProducerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProducerPreviousValuesPromise>() => T;
}

export interface ProducerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProducerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProducerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProducerPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  permissions: () => Promise<Permission[]>;
}

export interface AggregateComposer {
  count: Int;
}

export interface AggregateComposerPromise
  extends Promise<AggregateComposer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateComposerSubscription
  extends Promise<AsyncIterator<AggregateComposer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProducerEdge {
  node: Producer;
  cursor: String;
}

export interface ProducerEdgePromise
  extends Promise<ProducerEdge>,
    Fragmentable {
  node: <T = ProducerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProducerEdgeSubscription
  extends Promise<AsyncIterator<ProducerEdge>>,
    Fragmentable {
  node: <T = ProducerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRecording {
  count: Int;
}

export interface AggregateRecordingPromise
  extends Promise<AggregateRecording>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRecordingSubscription
  extends Promise<AsyncIterator<AggregateRecording>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Song",
    embedded: false
  },
  {
    name: "Artist",
    embedded: false
  },
  {
    name: "Album",
    embedded: false
  },
  {
    name: "Recording",
    embedded: false
  },
  {
    name: "Composer",
    embedded: false
  },
  {
    name: "Producer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
